<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2014 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<library>
	<!---
		<p>This class is the base class for a properties view of a {@link wcfFlowElementObjectDefinition flow element object}. The properties
		view of a flow element object is an editor that is presented to a business user within Flow Builder whenever the flow element
		is opened or a new flow element is created. It allows a business user to edit or enter all the properties of a business object
		as an input form.</p>

		<p>Implementations of this class must have only one immediate child instance of two different types of view classes. In most cases,
		when only one page of input widgets is required, {@link wcfPropertyGroup} is used. For example:
		@START_CODE
			<FlowElementProperties definitionName="extFlowElementProperties">
				<PropertyGroup name="container" collapsable="false">
					...
				</PropertyGroup>
			</FlowElementProperties>
		@END_CODE
		</p>
		
		<p>For more detailed flow elements that might require many inputs, widgets can be split up into tabs for organization. In this case,
		the child class must be an instance of {@link wcfPropertyTabs}. For example: 
		@START_CODE
			<FlowElementProperties definitionName="extFlowElementProperties">
				<PropertyTabs name="samplePropertyTabs">
					<PropertyTabPane name="common" text="General Properties">
						<PropertyGroup name="commonGroup" collapsable="false">
							...
						</PropertyGroup>
					</PropertyTabPane>
					<PropertyTabPane name="advanced" text="Advanced Options">
						<PropertyGroup name="advancedGroup" collapsable="false">
							...
						</PropertyGroup>
					</PropertyTabPane>
				</PropertyTabs>
			</FlowElementProperties>
		@END_CODE
		</p>
		
		<p>Implementations should not be instantiated directly. They should be specified in the
		{@link wcfFlowElementObjectDefinition#propertiesClass propertiesClass} attribute of a
		{@link wcfFlowElementObjectDefinition flow element object definition}.</p>
		
		@keywords abstract
	-->
	<class name="wcfFlowElementProperties" defaultplacement="content">
		<!---
			@keywords private
			A reference to the instance of the {@link wcfModelObject} whose properties are being displayed by the view.
		-->
		<attribute name="o" value="null" setter="this.setModelObject(o)"/>
		<!---
			@keywords private
			The icon to be displayed in the view's header. This should be the name of a resource available in the library.
		-->
		<attribute name="headerIconResource" value="" type="string"/>
		<!---
			@keywords private
			The title of the view. The default value is the empty string.
		-->
		<attribute name="title" value="" type="string" />
		<!---
			@keywords private
			An array of enablement condition delegates that exist in any of this view's descendants. This array
			is populated by the descendant that contains an {@link wcfEnablementCondition enablement condition}.
		-->
		<attribute name="enablementConditionDels" value="${[]}"/>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.releaseModelObjectDel.unregisterAll();
			delete this.releaseModelObjectDel;
			super.destroy();
			]]>
		</method>

		<!---
			@keywords private
			This method sets the {@link wcfModelObject} for this properties view. This method is declared as the setter for
			{@link wcfFlowElementProperties#o}.
			@param wcfModelObject newObject The new object to set for this properties view.
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			if (this["o"] != newObject) {
				this.o = newObject;
				
				if (this["releaseModelObjectDel"]) {
					this.releaseModelObjectDel.unregisterAll();
				}
				else {
					this.releaseModelObjectDel = new lz.Delegate(this, "releaseModelObject");
				}
				
				if (this.o) {
					this.releaseModelObjectDel.register(this.o, "beingDestroyed");
				}
				
				// force all descendant enablement conditions to re-evaluate
				if(this["enablementConditionDels"]) {
					for(var i = 0; i < this.enablementConditionDels.length; i++) {
						enablementConditionDels[i].execute(this.o);
					}
				}

				if(this["ono"]) {
					this.ono.sendEvent(o);
				}
			}
			]]>
		</method>

		<!---
			Release the model object.
			@keywords private
		-->
		<method name="releaseModelObject" args="e=null">
			<![CDATA[
			this.setAttribute("o", null);
			]]>
		</method>
		
		<!---
			@keywords private
			
			<p>This method searches the object properties view looking for a {@link wcfPropertiesComponent properties component}
			that is enabled and matches the specified arguments. An {@link wcfModelObject object} must be passed in to this method as well as one 
			of an {@link wcfModelProperty object property} or a {@link wcfValidator#validatorType validator type}. The matching properties component must
			match either the specified property, or the specified object and validator type.
			
			<p>If a match is found, this method ensures that the {@link wcfPropertiesComponent properties component} is visible by making
			it and all of its ancestors visible. This can result in the expansion of {@link wcfPropertyGroup property groups}
			and the changing of {@link wcfPropertyTab tabs}. The method then sets the focus to the {@link wcfPropertiesComponent properties component}
			and returns true.
			
			<p>If no match is found, then this method returns false and does not affect the focus or display.
						
			@param wcfModelObject errorObject the model object that contains the error
			@param wcfModelProperty errorProperty the model property that contains the error
			@param string validatorType the validator type of the validator that reported the error
			@return boolean true if the focus was set to the specified error, false otherwise
		-->
		<method name="setFocusToError" args="errorObject, errorProperty, validatorType">
			<![CDATA[
			return wcfObjectPropertiesUtil.setFocusToError(this, errorObject, errorProperty, validatorType);
			]]>
		</method>
		
		<simplelayout axis="y" />
		<view name="content"/>
		<view name="bottomPadding" height="10"/>
	</class>

</library>
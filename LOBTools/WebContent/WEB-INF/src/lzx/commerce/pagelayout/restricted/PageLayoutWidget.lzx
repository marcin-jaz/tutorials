<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2013 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	
	<!---
		This class defines a widget object definition.
	-->
	<class name="plmWidgetObjectDefinition" extends="wcfChildObjectDefinition"
		idProperty="widgetId" objectGroups="LayoutWidgetAlias">

		<!--- Comma separated list of widget groups to be associated with the widget, used in the drop
			down menu for displaying widget groups -->
		<attribute name="widgetDisplayGroups" type="string"/>

		<!--- Comma separated list of Widget groups to be associated with the widget, used for slot 
			restriction to different types of widgets-->
		<attribute name="widgetRestrictionGroups" type="string"/>
		
		<!---
			This attribute specifies the relative URL to the help file containing the explanation of this object.
		-->		
		<attribute name="helpLink" type="string"/>

		<!--- @keywords private -->
		<method name="initializeDefinition" args="model">
			<![CDATA[
			super.initializeDefinition(model);
			if (typeof(this["widgetDisplayGroup"]) == "undefined") {
				this.widgetDisplayGroup = null;
			}
			if (typeof(this["widgetRestrictionGroup"]) == "undefined") {
				this.widgetRestrictionGroup = null;
			}
			if (typeof(this["helpLink"]) == "undefined") {
				this.helpLink = null;
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="integrateBaseObject">
			<![CDATA[
			super.integrateBaseObject();
			if (typeof(this["widgetDisplayGroup"]) == "undefined"){
				this.widgetDisplayGroup = this.baseDefinition["widgetDisplayGroup"];
			}
			if (typeof(this["widgetRestrictionGroup"]) == "undefined") {
				this.widgetRestrictionGroup = this.baseDefinition["widgetRestrictionGroup"];
			}
			if (typeof(this["helpLink"]) == "undefined") {
				this.helpLink = this.baseDefinition["helpLink"];
			}
			]]>
		</method>		
	</class>
	
	<!---
		This class defines a widget group to be used for filtering widgets and restricting widgets from slots.
	-->
	<class name="plmLayoutWidgetGroup" extends="node">
		<!--- This attribute sets the identifier for the widget group. -->
		<attribute name="identifier" type="string"/>
		
		<!--- This attribute sets the display name for the widget group. --> 
		<attribute name="displayName" type="string"/>
		
		<!--- 
			@keywords private 
			Initialization method for this class.
		-->
		<method name="init">
			<![CDATA[
			super.init();
			
			var layoutWidgetGroups = parent["layoutWidgetGroups"];
			if (!layoutWidgetGroups) {
				layoutWidgetGroups = [];
				parent.layoutWidgetGroups = layoutWidgetGroups;
			}
			layoutWidgetGroups.push(this);
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		Helper class for widget group
	-->
	<node id="plmWidgetGroupUtil">
		<!--- 
			@keywords private
			@param Array widgetGroups Array of widget groups associated with the widget.
			@param Array allowedWidgetGroups Array of allowed widget groups.
			@return true If the widget is allowed in this slot according to slot restrictions.
		 -->
		<method name="widgetAllowed" args="widgetGroups, allowedWidgetGroups">
			<![CDATA[
			var allowed = false;
			
			if (allowedWidgetGroups.length == 0) {
				allowed = true;
			} else {
				for (var i = 0; i < widgetGroups.length; i++) {
					if (allowedWidgetGroups.indexOf(widgetGroups[i]) != -1) {
						allowed = true;
						break;	
					}
				}
			} 
			
			return allowed;
			]]>
		</method>
		
		<!--- 
			@keywords private
			@param Array widgetGroups Array of widget groups associated with the widget.
			@param String selectedWidgetGroup The currently selected widget group in the drop down menu.
			@return true If the widget will be displayed for the selected widget group.
		 -->
		<method name="widgetDisplayed" args="widgetGroups, selectedWidgetGroup">
			<![CDATA[
			var displayed = false;
			
			if (selectedWidgetGroup == "All") {
				displayed = true;
			} else if (widgetGroups.indexOf(selectedWidgetGroup) != -1) {
				displayed = true;
			} 
			
			return displayed;
			]]>
		</method>
		
		<!---
			@keywords private

			Provides an array of widget group objects sorted by their display names.
			
			@param plmLayoutWidgetGroup[] widgetGroups Array of plmLayoutWidgetGroup objects.
			@returns plmLayoutWidgetGroup[] An array of plmLayoutWidgetGroup objects sorted by display name of the widget groups.
		-->
		<method name="getSortedWidgetGroups" args="widgetGroups">
			<![CDATA[
				var sortedWidgetGroups = [];
				if (widgetGroups != null && widgetGroups.length > 1) {
					sortedWidgetGroups = widgetGroups;

					var comparator = function (o1, o2) {
						var result = 0;
						
						var value1 = o1.displayName;
						if (value1 == null || value1 == "") {
							value1 = " ";
						} else {
							value1 = value1.toLowerCase();
						}
						
						var value2 = o2.displayName;
						if (value2 == null || value2 == "") {
							value2 = " ";
						} else {
							value2 = value2.toLowerCase();
						}
						
						if (value1 > value2) {
							result = 1;
						} else if (value1 < value2) {
							result = -1;
						}
						
						return result;
					}
					
					sortedWidgetGroups.sort(comparator);
				}
				return sortedWidgetGroups;
			]]>
		</method>
	</node>
	
</library>
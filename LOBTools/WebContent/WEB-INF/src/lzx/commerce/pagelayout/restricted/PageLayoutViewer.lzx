<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2013 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	
	<!---
		This class defines a page layout viewer for use within a grid view.
	-->
	<class name="plmGridPageLayout" extends="wcfGridColumn" alignment="center" width="80" editable="false">
		<!---
			@keywords private
			Use "plmBasePageLayoutEditor" to create instance of column viewer.
		-->
		<attribute name="cellViewerClass" value="plmGridPageLayoutViewer"/>
	</class>
	
	<!---
		@keywords private
		The grid page layout viewer class used by plmGridPageLayout to display a layout thumbnail in a grid.
	-->
	<class name="plmGridPageLayoutViewer" extends="plmBasePageLayoutViewer" width="50"/>

	<!---
		@keywords private
		Base page layout viewer class. Use this class to render wireframe representation of a page layout that displays
		the relative locations of the available slots.
	-->
	<class name="plmBasePageLayoutViewer" bgcolor="0x868686" defaultplacement="slotContainer" height="${this.content.height==0 ? 0 : this.content.height+2}">
		<!---
			@keywords private
			Page layout object.
		-->
		<attribute name="o" value="${null}"/>
		<!---
			@keywords private
			Set to true to display the slot text.
		-->
		<attribute name="showText" type="boolean" value="false"/>
		<!---
			@keywords private
			Set to true to highlight all of the slots that have widgets assigned.
		-->
		<attribute name="showPopulatedSlots" type="boolean" value="false"/>
		<!---
			@keywords private
			Set to true to indicate that you can select the current slot.
		-->
		<attribute name="allowSelection" type="boolean" value="false"/>
		<!---
			@keywords private
			The hover over slot object.
		-->
		<attribute name="hoverSlotObject" value="${null}"/>
		<!---
			@keywords private
			The selected slot object.
		-->
		<attribute name="selectedSlotObject" value="${null}"/>
		<!---
			@keywords private
			Zoom multiplier.
		-->
		<attribute name="zoomFactor" type="number" value="1"/>
		<!---
			@keywords private
			Default slot background color.
		-->
		<attribute name="defaultSlotBackgroundColor" type="color" value="0xa1a1a1"/>
		<!---
			@keywords private
			Default slot border color.
		-->
		<attribute name="defaultSlotBorderColor" type="color" value="0x000000"/>
		<!---
			@keywords private
			Default slot border size.
		-->
		<attribute name="defaultSlotBorderSize" type="number" value="0"/>
		<!---
			@keywords private
			Default slot text color.
		-->
		<attribute name="defaultSlotTextColor" type="color" value="black"/>
		<!---
			@keywords private
			Hover slot background color.
		-->
		<attribute name="hoverSlotBackgroundColor" type="color" value="0xd4e9ff"/>
		<!---
			@keywords private
			Hover slot border color.
		-->
		<attribute name="hoverSlotBorderColor" type="color" value="0x868686"/>
		<!---
			@keywords private
			Hover slot border size.
		-->
		<attribute name="hoverSlotBorderSize" type="number" value="1"/>
		<!---
			@keywords private
			Highlighted slot background color.
		-->
		<attribute name="hilitedSlotBackgroundColor" type="color" value="0xffe284"/>
		<!---
			@keywords private
			Highlighted slot border color.
		-->
		<attribute name="hilitedSlotBorderColor" type="color" value="0x868686"/>
		<!---
			@keywords private
			Highlighted slot border size.
		-->
		<attribute name="hilitedSlotBorderSize" type="number" value="1"/>
		<!---
			@keywords private
			Selected slot border color.
		-->
		<attribute name="selectedSlotBorderColor" type="color" value="0x696969"/>
		<!---
			@keywords private
			Selected slot border size.
		-->
		<attribute name="selectedSlotBorderSize" type="number" value="2"/>
		<!---
			@keywords private
			Selected slot background color.
		-->
		<attribute name="selectedSlotBackgroundColor" type="color" value="0xffe284"/>
		<!---
			@keywords private
			Disabled slot background color.
		-->
		<attribute name="disabledSlotBackgroundColor" type="color" value="0xd7d7d7"/>
		<!---
			@keywords private
			Disabled slot text color.
		-->
		<attribute name="disabledSlotTextColor" type="color" value="0x6d6d6d"/>
		<!---
			@keywords private
			The list of slot views.
		-->
		<attribute name="slotViews" value="${[]}"/>
		<!---
			@keywords private
			List of available slot views.
		-->
		<attribute name="availableSlotViews" value="${[]}"/>
		<!---
			@keywords private
			The tooltip to display over enabled slots.
		-->
		<attribute name="slotTooltipText" type="string" value=""/>

		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			super.init();
			this.updateSlotsDel = new lz.Delegate(this, "updateSlots");
			this.updateSlots();
			]]>
		</method>
		
		<!---
			@keywords private
		-->
		<method name="destroy">
			<![CDATA[
			this.updateSlotsDel.unregisterAll();
			delete this.updateSlotsDel;
			super.destroy();
			]]>
		</method>
		
		<!---
			Update the slots.
		-->
		<method name="updateSlots" args="e=null">
			<![CDATA[
			this.updateSlotsDel.unregisterAll();
			while (this.slotViews.length > 0) {
				var slotView = this.slotViews.pop();
				slotView.setAttribute("visible", false);
				slotView.setAttribute("o", null);
				this.availableSlotViews.unshift(slotView);
			}
			this.content.dottedLine.clear();
			this.updateSlotsDel.register(this, "ono");
			this.updateSlotsDel.register(this, "onwidth");
			if (this.o != null && this.width > 3) {
				var slots = this.o.getObjects("LayoutContainerWidget/LayoutSlot", this.updateSlotsDel);
		   		var layoutWidth = 0;
				for (var i = 0; i < slots.length; i++) {
					var slotX = Number(slots[i].getPropertyValue("xSlotPosition_xLocation"));
					var slotWidth = Number(slots[i].getPropertyValue("xSlotPosition_width"));
					if (slotX + slotWidth > layoutWidth) {
						layoutWidth = slotX + slotWidth;
					} 
		   		}
				this.setAttribute("zoomFactor", layoutWidth > 0 ? ((this.width - 3) / layoutWidth) : 1);
				for (var i = 0; i < slots.length; i++) {
					var slotView = null;
					if (this.availableSlotViews.length > 0) {
						slotView = this.availableSlotViews.shift();
						slotView.setAttribute("o", slots[i]);
						slotView.setAttribute("visible", true);
						slotView.updateSlot();
					}
					else {
						slotView = new lz.plmPageLayoutSlot(this, {
							o: slots[i]
						});
					}
					this.slotViews.push(slotView);
				}
			}
			]]>
		</method>
		
		<!---
			This method is called when the user selects a slot. Override this method to provide
			the slot selection behaviour.
		-->
		<method name="slotSelected" args="slotObject"/>
		
		<view bgcolor="white" name="content" x="1" y="1" width="${Math.max(parent.width-2,0)}" height="${this.slotContainer.height==0 ? 0 : this.slotContainer.height+1}">
			<drawview name="dottedLine" x="1" y="1" width="${parent.slotContainer.width}" height="${parent.slotContainer.height}"/>
			<view name="slotContainer" x="1" y="1" width="${Math.max(parent.width-1,0)}"/>
		</view>
	</class>

	<!---
		@keywords private
		This class renders a page layout slot.
	-->
	<class name="plmPageLayoutSlot" width="0" height="0" clickable="false">
		<!---
			Slot object.
		-->
		<attribute name="o" value="${null}"/>
		<!---
			Tooltip for this slot.
		-->
		<wcfTooltip name="tooltip" text="${classroot.parent.slotTooltipText}" enabled="${classroot.clickable}"/>
	
		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			super.init();
			this.updateSlotDel = new lz.Delegate(this, "updateSlot");
			this.updateSlot();			
			]]>
		</method>
		
		<!---
			@keywords private
		-->
		<method name="destroy">
			<![CDATA[
			this.updateSlotDel.unregisterAll();
			delete this.updateSlotDel;
			super.destroy();
			]]>
		</method>

		<!---
			@keywords private
			Update the slot.
		-->
		<method name="updateSlot" args="e=null">
			<![CDATA[
			this.updateSlotDel.unregisterAll();
			var slotClickable = false;
			if (this.o != null) {
				slotClickable = this.parent.allowSelection;
				this.updateSlotDel.register(this.parent, "onallowSelection");
				this.updateSlotDel.register(this.parent, "onselectedSlotObject");
				this.updateSlotDel.register(this.parent, "onhoverSlotObject");
				this.updateSlotDel.register(this.parent, "onshowText");
				this.updateSlotDel.register(this.o, "propertyChanged");
				this.setAttribute("x", Number(this.o.getPropertyValue("xSlotPosition_xLocation")) * this.parent.zoomFactor);
				this.setAttribute("y", Number(this.o.getPropertyValue("xSlotPosition_yLocation")) * this.parent.zoomFactor);
				this.setAttribute("width", Number(this.o.getPropertyValue("xSlotPosition_width")) * this.parent.zoomFactor - 1);
				this.setAttribute("height", Number(this.o.getPropertyValue("xSlotPosition_height")) * this.parent.zoomFactor - 1);
				this.displayText.setAttribute("text", this.o.getPropertyValue("slotName"));
				var slotTextVisible = this.parent.showText;
				var slotTextColor = this.parent.defaultSlotTextColor;
				var slotBackgroundColor = this.parent.defaultSlotBackgroundColor;
				var slotBorderSize = this.parent.defaultSlotBorderSize;
				var slotBorderColor = this.parent.defaultSlotBorderColor;
				if (this.o.getPropertyValue("xSlotPosition_state") == "disabled") {
					slotClickable = false;
					slotTextVisible = false;
					slotTextColor = this.parent.disabledSlotTextColor;
					slotBackgroundColor = this.parent.disabledSlotBackgroundColor;
				}
				else if (this.o == this.parent.selectedSlotObject) {
					slotBorderColor = this.parent.selectedSlotBorderColor;
					slotBackgroundColor = this.parent.selectedSlotBackgroundColor;
					slotBorderSize = this.parent.selectedSlotBorderSize;
				}
				else if(this.o == this.parent.hoverSlotObject){
						slotBackgroundColor = this.parent.hoverSlotBackgroundColor;
						slotBorderColor = this.parent.hoverSlotBorderColor;
						slotBorderSize = this.parent.hoverSlotBorderSize;				
				}
				else if (this.parent.showPopulatedSlots) {
					var populated = false;
					var slotIdentifier = this.o.getPropertyValue("slotIdentifier");
					var layoutWidgets = this.parent.o.getObjects("LayoutWidgetAlias", this.updateSlotDel);
					
					this.parent.o.loadChildren();
					for (var i = 0; i < layoutWidgets.length; i++) {
						var slotIdentifierProperty = layoutWidgets[i].getProperty("slotIdentifier");
						this.updateSlotDel.register(slotIdentifierProperty, "onvalue");
						if (slotIdentifier == slotIdentifierProperty.value) {
							populated = true;
							break;
						}
					}
					if (populated) {
						slotBackgroundColor = this.parent.hilitedSlotBackgroundColor;
						slotBorderColor = this.parent.hilitedSlotBorderColor;
						slotBorderSize = this.parent.hilitedSlotBorderSize;
					}
				}
				this.displayText.setAttribute("visible", slotTextVisible);
				this.displayText.setAttribute("fgcolor", slotTextColor);
				this.setAttribute("bgcolor", slotBackgroundColor);
				this.border.clear();
				if (slotBorderSize > 0 ) {
					this.border.beginPath();
					this.border.moveTo(slotBorderSize/2, slotBorderSize/2);
					this.border.lineTo(slotBorderSize/2, this.height - slotBorderSize/2);
					this.border.lineTo(this.width - slotBorderSize/2, this.height - slotBorderSize/2);
					this.border.lineTo(this.width - slotBorderSize/2, slotBorderSize/2);
					this.border.closePath();
					this.border.strokeStyle = slotBorderColor;
					this.border.lineWidth = slotBorderSize;
					this.border.stroke();
				}
				
				//draw dotted line separator on the right border
				var dottedRightBorder = this.o.getPropertyValue("xSlotPosition_dottedRightBorder");
				if (dottedRightBorder && dottedRightBorder == "true" ) {
					var strokeSpacing = 3;
					var strokeLength = 2;
					var yPos = strokeSpacing;
					this.parent.content.dottedLine.beginPath();
					while ( yPos <= this.height - strokeLength ) {
						this.parent.content.dottedLine.moveTo(this.x + this.width + 1/2, this.y + yPos);
						this.parent.content.dottedLine.lineTo(this.x + this.width + 1/2, this.y + yPos + strokeLength);
						yPos += strokeLength + strokeSpacing;
					}
					this.parent.content.dottedLine.strokeStyle = this.parent.defaultSlotBackgroundColor;;
					this.parent.content.dottedLine.lineWidth = 1;
					this.parent.content.dottedLine.stroke();
				}
			}
			this.setAttribute("clickable", slotClickable);
			]]>
		</method>

		<handler name="onmouseover">
			<![CDATA[
			if (this.clickable) {
				this.parent.setAttribute("hoverSlotObject", this.o);
			}
			]]>
		</handler>	
		
		<handler name="onmouseout">
			<![CDATA[
			if (this.parent.hoverSlotObject == this.o) {
				this.parent.setAttribute("hoverSlotObject", null);
			} 
			]]> 
		</handler>

		<handler name="onclick" >
			<![CDATA[
			if (this.o != null && this.o.getPropertyValue("xSlotPosition_state") != "disabled") {
				this.parent.slotSelected(this.o);
			}
			]]>
		</handler>
		<drawview name="border" width="${parent.width}" height="${parent.height}" />
		<text name="displayText" fgcolor="${parent.textColor}" fontsize="10" y="-1" x="2"/>
	</class>
	
	<!---
		Use this class to add a slot selector widget to a grid.
	-->
	<class name="plmGridSlotSelector" extends="wcfGridColumn">
		<!---
			@keywords private
		-->
		<attribute name="cellViewerClass" value="wcfGridTextViewer"/>
		<!---
			@keywords private
		-->
		<attribute name="cellEditorClass" value="plmGridSlotSelectorEditor"/>
	</class>
	
	<!---
		@keywords private
		Slot selector widget used by plmGridSlotSelector.
	-->
	<class name="plmGridSlotSelectorEditor" extends="wcfComboBox" width="${immediateparent.availableWidth}">
		<!---
			Create the list of available slots.
		-->
		<method name="createComboBox" args="e=null">
			<![CDATA[
			if (!this["propValueDel"]) {
				this.propValueDel = new lz.Delegate(this, "createComboBox");
			}
			else {
				this.propValueDel.unregisterAll();
			}
						
			if (this.property != null && this.property.o != null && this.property.o.parentObject != null) {
				var widgetRestrictionGroups = this.property.o.getPropertyValue("widgetRestrictionGroups");
				if (typeof widgetRestrictionGroups == 'string') {
					widgetRestrictionGroups = wcfStringUtil.splitAndTrim(widgetRestrictionGroups, ",");
				}
				var slots = this.property.o.parentObject.getObjects("LayoutContainerWidget/LayoutSlot", this.propValueDel);
				var values = [];
				for (var i = 0; i < slots.length; i++) {
					if (slots[i].getPropertyValue("xSlotPosition_state") != "disabled") {
						var allowedWidgetGroups = wcfStringUtil.splitAndTrim(
								slots[i].getPropertyValue("xSlotPosition_allowedWidgetGroups"), ",");
						
						if (plmWidgetGroupUtil.widgetAllowed(widgetRestrictionGroups, allowedWidgetGroups)) {
							var slotIdentifier = slots[i].getPropertyValue("slotIdentifier");
							var slotDisplayName = slots[i].getPropertyValue("slotName");
							values.push({
								displayName: slotDisplayName,
								value: slotIdentifier
							});
						}
					}
				}

				this._initializingComboBox = true;
				
				this.setValues(values);
				this.selectItem(this.property.value);
				if (this.selectedValue == null && this.property.value != null && this.property.value != "") {
					this.selectValue({
						value: this.property.value,
						displayName: this.property.value
					});
				}
				else {
					this.updateSelectedValue();
				}
				this._initializingComboBox = false;
			}
			]]>
		</method>
	</class>

</library>